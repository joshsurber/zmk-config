// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro

/ {
    behaviors {
        hrm: home_row_mod {
            label = "home_row_mod";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            bindings =
                <&kp>,
                <&kp>;

            global-quick-tap;
        };
        sh_cw: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            bindings =
                <&sk LSHFT>,
                <&caps_word>;

            tapping-term-ms = <300>;
        };
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            flavor = "tap-preferred";
        };
        bksp_del: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            bindings =
                <&kp BSPC>,
                <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lt_bksp: lt_bksp {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BKSP";
            bindings =
                <&mo>,
                <&bksp_del>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        paste: paste {
            compatible = "zmk,behavior-hold-tap";
            label = "PASTE";
            bindings =
                <&paste_enter>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        copy: copy {
            compatible = "zmk,behavior-hold-tap";
            label = "COPY";
            bindings =
                <&sel_copy>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        cut: cut {
            compatible = "zmk,behavior-hold-tap";
            label = "CUT";
            bindings =
                <&sel_cut>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    combos {
        compatible = "zmk,combos";

        fun_pscrn {
            bindings = <&lt 4 PSCRN>;
            key-positions = <30 31>;
            layers = <0>;
        };
    };

    macros {
        pw1: pw1 {
            compatible = "zmk,behavior-macro";
            label = "PW1";
            #binding-cells = <0>;
            bindings = <&none &kp LS(C) &kp N0 &kp R &kp R &kp E &kp C &kp T &kp DOT &kp H &kp O &kp R &kp S &kp E &kp DOT &kp B &kp A &kp T &kp T &kp E &kp R &kp Y &kp DOT &kp S &kp T &kp A &kp P &kp L &kp E &kp RET>;
        };
        paste_enter: paste_enter {
            compatible = "zmk,behavior-macro";
            label = "PASTE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LC(V) &kp RET>;
        };
        sel_cut: sel_cut {
            compatible = "zmk,behavior-macro";
            label = "SEL_CUT";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(X)>;
        };
        sel_copy: sel_copy {
            compatible = "zmk,behavior-macro";
            label = "SEL_COPY";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(C)>;
        };
        pw2: pw2 {
            compatible = "zmk,behavior-macro";
            label = "PW2";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp U &kp T &kp U &kp M &kp N &kp SPACE &kp SQT &kp N2 &kp N3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp F         &kp P         &kp G           &kp J        &kp L         &kp U         &kp Y        &kp SINGLE_QUOTE
&hrm LALT A  &hrm LGUI R  &hrm LCTRL S  &hrm LSHFT T  &kp D           &kp H        &hrm LSHFT N  &hrm LCTRL E  &hrm LGUI I  &hrm LALT O
&kp Z        &kp X        &kp C         &kp V         &kp B           &kp K        &kp M         &kp COMMA     &kp DOT      &kp FSLH
                                        &lt 3 RET     &lt_bksp 2 0    &lt 1 SPACE  &sh_cw
            >;
        };

        nav {
            bindings = <
&kp PG_UP  &kp HOME      &kp UP         &kp END         &kp LC(LS(TAB))    &pw1         &none           &to 5          &bootloader   &sys_reset
&kp PG_DN  &kp LEFT      &kp DOWN       &kp RIGHT       &kp LC(TAB)        &key_repeat  &sk LSHFT       &sk LCTRL      &sk LGUI      &sk LALT
&kp LC(Z)  &cut 0 LC(X)  &copy 0 LC(C)  &paste 0 LC(V)  &kp LC(A)          &kp LC(A)    &paste 0 LC(V)  &copy 0 LC(C)  &cut 0 LC(X)  &kp LC(Z)
                                        &kp TAB         &kp ESC            &none        &none
            >;
        };

        num {
            bindings = <
&sys_reset  &bootloader   &mo 6          &none           &pw2         &kp LBKT   &kp N7   &kp N8  &kp N9  &kp RBKT
&sk LALT    &sk LGUI      &sk LCTRL      &sk LSHFT       &kp BSLH     &kp MINUS  &kp N4   &kp N5  &kp N6  &kp SEMI
&kp LC(Z)   &cut 0 LC(X)  &copy 0 LC(C)  &paste 0 LC(V)  &kp LC(A)    &kp EQUAL  &kp N1   &kp N2  &kp N3  &kp GRAVE
                                         &none           &none        &kp N0     &kp DOT
            >;
        };

        sym {
            bindings = <
&sys_reset  &bootloader   &none          &none           &none        &kp LBRC   &kp AMPS  &kp STAR   &kp LPAR   &kp RBRC
&sk LALT    &sk LGUI      &sk LCTRL      &sk LSHFT       &kp PIPE     &kp UNDER  &kp DLLR  &kp PRCNT  &kp CARET  &kp COLON
&kp LC(Z)   &cut 0 LC(X)  &copy 0 LC(C)  &paste 0 LC(V)  &kp LC(A)    &kp PLUS   &kp EXCL  &kp AT     &kp HASH   &kp TILDE
                                         &none           &none        &kp LPAR   &kp RPAR
            >;
        };

        fun {
            bindings = <
&sys_reset  &none         &none          &none           &none        &none  &kp F7  &kp F8  &kp F9  &kp F10
&kp LALT    &kp LGUI      &kp LCTRL      &kp LSHFT       &none        &none  &kp F4  &kp F5  &kp F6  &kp F11
&kp LC(Z)   &cut 0 LC(X)  &copy 0 LC(C)  &paste 0 LC(V)  &kp LC(A)    &none  &kp F1  &kp F2  &kp F3  &kp F12
                                         &none           &none        &none  &none
            >;
        };

        vim {
            bindings = <
&none      &none         &none          &none           &none        &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &to 0
&kp LALT   &kp LGUI      &kp LCTRL      &kp LSHFT       &none        &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp BSPC
&kp LC(Z)  &cut 0 LC(X)  &copy 0 LC(C)  &paste 0 LC(V)  &kp LC(A)    &to 0     &kp RET    &kp TAB    &kp ESC    &kp DEL
                                        &none           &none        &to 0     &to 0
            >;
        };

        bt {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans    &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
&trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans        &trans
                        &trans  &trans    &out OUT_BLE  &out OUT_USB
            >;
        };
    };
};
