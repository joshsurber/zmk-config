// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            bindings =
                <&kp>,
                <&kp>;
        };
        bksp_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings =
                <&kp BACKSPACE>,
                <&kp DEL>,
                <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
        sh_cw: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            bindings =
                <&sk LSHFT>,
                <&caps_word>;
        };
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings =
                <&shifted>,
                <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    combos {
        compatible = "zmk,combos";

        fun_del {
            bindings = <&lt 6 DEL>;
            key-positions = <31 30>;
            layers = <0 1 2>;
        };

        med_esc {
            bindings = <&lt 3 ESC>;
            key-positions = <32 33>;
            layers = <0 1 2>;
        };

        fun_del2 {
            bindings = <&lt 6 DEL>;
            key-positions = <31 2>;
            layers = <0 1 2>;
        };

        med_esc2 {
            bindings = <&lt 3 ESC>;
            key-positions = <32 7>;
            layers = <0 1 2>;
        };
    };

    macros {
        enter_pw: enter_pw {
            compatible = "zmk,behavior-macro";
            label = "ENTER_PW";
            #binding-cells = <0>;
            bindings = <&none &kp LS(C) &kp N0 &kp R &kp R &kp E &kp C &kp T &kp DOT &kp H &kp O &kp R &kp S &kp E &kp DOT &kp B &kp A &kp T &kp T &kp E &kp R &kp Y &kp DOT &kp S &kp T &kp A &kp P &kp L &kp E &kp RET>;
        };
        paste_enter: paste_enter {
            compatible = "zmk,behavior-macro";
            label = "PASTE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LC(V) &kp RET>;
        };
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };
        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&as Q       &as W       &as F        &as P        &as G         &as J        &as L        &as U        &as Y       &as SINGLE_QUOTE
&ht LALT A  &ht LGUI R  &ht LCTRL S  &ht LSHFT T  &as D         &as H        &ht LSHFT N  &ht LCTRL E  &ht LGUI I  &ht LALT O
&as Z       &as X       &as C        &as V        &as B         &as K        &as M        &as COMMA    &as DOT     &as FSLH
                                     &lt 5 RET    &lt 4 BSPC    &lt 1 SPACE  &lt 3 TAB
            >;
        };

        nav {
            bindings = <
&kp PG_UP  &kp HOME   &kp UP     &kp END    &kp INS         &enter_pw     &none      &none      &bootloader  &sys_reset
&kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &caps_word      &key_repeat   &sk LSHFT  &sk LCTRL  &sk LGUI     &sk LALT
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &paste_enter    &paste_enter  &kp LC(V)  &kp LC(C)  &kp LC(X)    &kp LC(Z)
                                 &kp ESC    &kp DEL         &none         &none
            >;
        };

        mouse {
            bindings = <
&kp PG_UP  &kp HOME   &kp UP     &kp END    &kp INS         &none         &none      &none      &bootloader  &sys_reset
&kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &trans          &key_repeat   &sk LSHFT  &sk LCTRL  &sk LGUI     &sk LALT
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &paste_enter    &paste_enter  &kp LC(V)  &kp LC(C)  &kp LC(X)    &kp LC(Z)
                                 &trans     &trans          &none         &none
            >;
        };

        media {
            bindings = <
&trans     &trans      &kp C_VOL_UP  &trans      &trans               &out OUT_BLE       &out OUT_USB  &none         &bootloader   &sys_reset
&trans     &kp C_PREV  &kp C_VOL_DN  &kp C_NEXT  &trans               &ext_power EP_TOG  &sk LSHFT     &sk LCTRL     &sk LGUI      &sk LALT
&kp LC(Z)  &kp LC(X)   &kp LC(C)     &kp LC(V)   &paste_enter         &bt BT_CLR         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
                                     &kp C_MUTE  &ht C_STOP C_PLAY    &none              &none
            >;
        };

        num {
            bindings = <
&sys_reset  &bootloader  &none      &none      &none           &kp LBKT   &kp N7   &kp N8  &kp N9  &kp RBKT
&sk LALT    &sk LGUI     &sk LCTRL  &sk LSHFT  &kp BSLH        &kp MINUS  &kp N4   &kp N5  &kp N6  &kp SEMI
&kp LC(Z)   &kp LC(X)    &kp LC(C)  &kp LC(V)  &paste_enter    &kp EQUAL  &kp N1   &kp N2  &kp N3  &kp GRAVE
                                    &none      &none           &kp N0     &kp DOT
            >;
        };

        sym {
            bindings = <
&sys_reset  &bootloader  &none      &none      &none           &kp LBRC   &kp AMPS  &kp STAR   &kp LPAR   &kp RBRC
&sk LALT    &sk LGUI     &sk LCTRL  &sk LSHFT  &kp PIPE        &kp UNDER  &kp DLLR  &kp PRCNT  &kp CARET  &kp COLON
&kp LC(Z)   &kp LC(X)    &kp LC(C)  &kp LC(V)  &paste_enter    &kp PLUS   &kp EXCL  &kp AT     &kp HASH   &kp TILDE
                                    &none      &none           &kp LPAR   &kp RPAR
            >;
        };

        fun {
            bindings = <
&sys_reset  &none      &none      &none      &none           &kp PSCRN        &kp F7   &kp F8  &kp F9  &kp F10
&sk LALT    &sk LGUI   &sk LCTRL  &sk LSHFT  &none           &kp SCROLLLOCK   &kp F4   &kp F5  &kp F6  &kp F11
&kp LC(Z)   &kp LC(X)  &kp LC(C)  &kp LC(V)  &paste_enter    &kp PAUSE_BREAK  &kp F1   &kp F2  &kp F3  &kp F12
                                  &none      &none           &kp SPACE        &kp TAB
            >;
        };

        button {
            bindings = <
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &paste_enter    &paste_enter  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)
&kp LALT   &kp LGUI   &kp LCTRL  &kp LSHFT  &caps_word      &caps_word    &kp LSHFT  &kp LCTRL  &kp LGUI   &kp LALT
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &paste_enter    &paste_enter  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)
                                 &none      &none           &none         &none
            >;
        };
    };
};
