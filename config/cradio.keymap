// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            bindings =
                <&kp>,
                <&kp>;
        };
        bksp_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings =
                <&kp BACKSPACE>,
                <&kp DEL>,
                <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
        sh_cw: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            bindings =
                <&sk LSHFT>,
                <&caps_word>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    combos {
        compatible = "zmk,combos";

        del {
            bindings = <&kp DEL>;
            key-positions = <31 30>;
            layers = <0 1>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <32 33>;
        };
        dash {
            bindings = <&kp MINUS>;
            key-positions = <32 33>;
            layers = <4>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <32 33>;
            layers = <5>;
        };

    };

    macros {
        enter_pw: enter_pw {
            compatible = "zmk,behavior-macro";
            label = "ENTER_PW";
            #binding-cells = <0>;
            bindings = <&none &kp LS(C) &kp N0 &kp R &kp R &kp E &kp C &kp T &kp DOT &kp H &kp O &kp R &kp S &kp E &kp DOT &kp B &kp A &kp T &kp T &kp E &kp R &kp Y &kp DOT &kp S &kp T &kp A &kp P &kp L &kp E &kp RET>;
        };
        paste_enter: paste_enter {
            compatible = "zmk,behavior-macro";
            label = "PASTE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LC(V) &kp RET>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W       &kp F        &kp P        &kp G         &kp J        &kp L        &kp U        &kp Y       &kp SINGLE_QUOTE
&ht LALT A  &ht LGUI R  &ht LCTRL S  &ht LSHFT T  &kp D         &kp H        &ht LSHFT N  &ht LCTRL E  &ht LGUI I  &ht LALT O
&kp Z       &kp X       &kp C        &kp V        &kp B         &kp K        &kp M        &kp COMMA    &kp DOT     &kp FSLH
                                     &lt 5 RET    &lt 4 BSPC    &lt 1 SPACE  &lt 3 TAB
            >;
        };

        nav {
            bindings = <
&kp PG_UP   &kp HOME   &kp UP      &kp END      &kp INS         &none       &none      &none      &none     &none
&kp PG_DN   &kp LEFT   &kp DOWN    &kp RIGHT    &key_repeat     &trans      &sk LSHFT  &sk LCTRL  &sk LGUI  &sk LALT
&kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &paste_enter    &none       &tog 1     &tog 4     &none     &none
                                   &trans       &trans          &none       &none
            >;
        };

        mouse {
            bindings = <
&kp PG_UP   &kp HOME   &kp UP      &kp END      &kp INS         &none       &none      &none      &none     &none
&kp PG_DN   &kp LEFT   &kp DOWN    &kp RIGHT    &key_repeat     &trans      &sk LSHFT  &sk LCTRL  &sk LGUI  &sk LALT
&kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &paste_enter    &none       &tog 1     &tog 4     &none     &none
                                   &trans       &trans          &none       &none
            >;
        };

        media {
            bindings = <
&kp PG_UP   &kp HOME   &kp UP      &kp END      &kp INS         &none       &none      &none      &none     &none
&kp PG_DN   &kp LEFT   &kp DOWN    &kp RIGHT    &key_repeat     &trans      &sk LSHFT  &sk LCTRL  &sk LGUI  &sk LALT
&kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &paste_enter    &none       &tog 1     &tog 4     &none     &none
                                   &trans       &trans          &none       &none
        };

        num {
            bindings = <
&trans    &trans    &trans     &trans     &trans        &kp LBKT   &kp N7   &kp N8  &kp N9  &kp RBKT
&sk LALT  &sk LGUI  &sk LCTRL  &sk LSHFT  &trans        &kp EQUAL  &kp N4   &kp N5  &kp N6  &kp SEMI
&trans    &trans    &trans     &trans     &trans        &kp BSLH   &kp N1   &kp N2  &kp N3  &kp GRAVE
                               &trans     &trans        &kp N0     &kp DOT
            >;
        };

        sym {
            bindings = <
&trans    &trans    &trans     &trans     &trans        &kp LBKT   &kp N7   &kp N8  &kp N9  &kp RBKT
&sk LALT  &sk LGUI  &sk LCTRL  &sk LSHFT  &trans        &kp EQUAL  &kp N4   &kp N5  &kp N6  &kp SEMI
&trans    &trans    &trans     &trans     &trans        &kp BSLH   &kp N1   &kp N2  &kp N3  &kp GRAVE
                               &trans     &trans        &kp N0     &kp DOT
            >;
        };

        fun {
            bindings = <
&trans    &trans    &trans     &trans     &trans        &kp LBKT   &kp N7   &kp N8  &kp N9  &kp RBKT
&sk LALT  &sk LGUI  &sk LCTRL  &sk LSHFT  &trans        &kp EQUAL  &kp N4   &kp N5  &kp N6  &kp SEMI
&trans    &trans    &trans     &trans     &trans        &kp BSLH   &kp N1   &kp N2  &kp N3  &kp GRAVE
                               &trans     &trans        &kp N0     &kp DOT
            >;
        };

        button {
            bindings = <
&kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO
&kp LALT    &kp LGUI   &kp LCTRL   &kp LSHFT    &caps_word    &caps_word  &kp LSHFT    &kp LCTRL   &kp LGUI   &kp LALT
&none       &none      &none       &none        &none         &none       &none        &none       &none      &none
                                   &none        &none         &none       &none
            >;
        };
    };
};
