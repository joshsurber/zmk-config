// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <21 22>;
            layers = <>;
        };

        bksp {
            bindings = <&kp BSPC>;
            key-positions = <7 8>;
            layers = <>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            layers = <>;
        };
    };

    macros {
        enter_pw: enter_pw {
            compatible = "zmk,behavior-macro";
            label = "ENTER_PW";
            #binding-cells = <0>;
            bindings = <&none &kp LS(C) &kp N0 &kp R &kp R &kp E &kp C &kp T &kp DOT &kp H &kp O &kp R &kp S &kp E &kp DOT &kp B &kp A &kp T &kp T &kp E &kp R &kp Y &kp DOT &kp S &kp T &kp A &kp P &kp L &kp E &kp RET>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp F        &kp P      &kp G    &kp J        &kp L      &kp U      &kp Y    &kp SINGLE_QUOTE
&kp A  &kp R  &mt LCTRL S  &kp T      &kp D    &kp H        &kp N      &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C        &kp V      &kp B    &kp K        &kp M      &kp COMMA  &kp DOT  &kp FSLH
                           &sk LCTRL  &sl 1    &lt 3 SPACE  &sk LSHFT
            >;
        };

        sym {
            bindings = <
&kp EXCL   &kp AT     &kp HASH   &kp DLLR      &kp LS(PRCNT)    &kp CARET  &kp AMPS     &kp ASTERISK  &kp MINUS  &kp EQUAL
&sk LALT   &sk LGUI   &sk LCTRL  &sk LSHFT     &caps_word       &kp SEMI   &kp ENTER    &kp TAB       &kp ESC    &kp BSPC
&kp TILDE  &kp GRAVE  &kp LBRC   &kp LS(LPAR)  &kp LBKT         &kp RBKT   &kp RPAR     &kp RBRC      &kp SEMI   &kp BSLH
                                 &caps_word    &to 2            &to 0      &key_repeat
            >;
        };

        nav {
            bindings = <
&trans        &trans    &trans     &trans     &trans       &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp PSCRN
&kp LEFT_ALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &kp PRCNT    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp BSPC
&trans        &trans    &trans     &trans     &trans       &enter_pw  &kp ENTER  &kp TAB    &kp ESC    &kp DEL
                                   &trans     &to 1        &to 0      &trans
            >;
        };

        num {
            bindings = <
&none      &none     &none      &none      &none        &trans     &kp N7  &kp N8  &kp N9  &kp BSPC
&kp LALT   &kp LGUI  &kp LCTRL  &kp LSHFT  &kp TAB      &kp ENTER  &kp N4  &kp N5  &kp N6  &kp N0
&kp SLASH  &kp PLUS  &kp EQUAL  &kp MINUS  &kp ASTRK    &trans     &kp N1  &kp N2  &kp N3  &kp DOT
                                &trans     &to 1        &to 0      &trans
            >;
        };

        layer_4 {
            bindings = <
&trans        &trans        &trans        &trans        &trans        &bootloader  &trans  &trans  &trans  &trans
&bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR    &trans       &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans       &trans  &trans  &trans  &trans
                                          &trans        &trans        &to 0        &trans
            >;

            label = "sys";
        };
    };
};
